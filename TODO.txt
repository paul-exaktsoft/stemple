TODO:
Report errors with file/source/line/column location
	Best practice for reporting errors? (not fatal exceptions)
	Unit tests for error messages
	Enclosing position reported should be start of directive, not end
	Whitespace putback needs start position (not important because we won't report errors in whitespace!)
Unit tests for command line executable
Optimize putback
	Putback to existing putback stream should not push new stream
	Pool of CharStreams
$(and) and $(or) should be n-ary, not just binary
Best practice for versioning executable
Memory leak detection for unit tests
$(<name>:<mods>) - modify expansion, like csh
	Output modifiers transform result of expansion - these could also be implemented as separate built-ins instead
		:w trim whitespace from result after expansion (:f/:b trim front/back) or $(trim $(<name>)), etc.?
		:l/:u change case or $(lower $(<name>)), etc.
		:c capitalize or $(capitalize $(<name>))?
		:s/match/replacement/ substitute or $(replace $(<name>),<match>,<replacement>)?
		:offset[:length] substring or $(substr $(<name>),offset[,length])?
		:h returns the directory of a path (aka "head")
		:t returns the filename of a path (aka "tail")
		:r returns the directory and filename without the last extension (aka "root")
		:e returns the extension of the path (aka "end")
$(exec <shell_command>)					Substitute standard output of command
$((<expr>))								Substitute result of evaluated arithmetic expression
$(if <expr>)							<expr> is arithmetic or logical expression (or use $(if $((x > 0))) maybe?)
$(length <name>)						Length of macro body? Or of text argument? Need arithmetic expression 1st
$(*[:<offset>[:<length>]])				All arguments (or a subset) [What separator? ' ' or ','? Or user-defined?]
$(for NAME, <init>, <test>, <update>)	Uses arithmetic expressions
$(foreach NAME, <text>[, <text>]*)...$(end)
$(// <any_freeform_comment_text>)		Or $(rem ...)?
$(set <chars>)							Set special chars
Asserts
CMakeLists.txt
Test building with Xcode and Linux Makefile
Define IFS for array separator
Array indexing
$() macro to look up values in Excel (or Google Sheets) (or a SQL db) (or MongoDB)
$() macro to insert a numbered line from a file (or a range of lines, with column range(s) too)
Verbosity
	Report files opening/closing
	Report macros being expanded w/ arguments
	File/macro/line/word/char counts
	Time?
	Expansion factor/ratio
Doxygen comments

DONE:
Variable substitution
$(<name>)								<name> is just text, so can contain $() expansions too. <name> cannot contain spaces or special chars
$$(...									Literal (escaped) "$("
$(<name> <text>[, <text>]...)			<text> can contain $() expansions too, text can contain spaces. (Leading spaces? After single separating <space> or <tab>?)
$(1), $(2), etc...						Arguments to current macro
Google Test/Mock unit tests
[<wspace>]$(...)[<wspace>]<nl>			Line is ignored (allows $() on a line by itself without adding a blank line to the output)
$(<name>=<text>)						<text> can containing leading whitespace. Embedded $()s are expanded recursively when body is expanded
Use variables for special chars
[<wspace>]$(...)[<wspace>]$<nl>			Line is not ignored
Make special characters configurable
$(<name>:=<text>)						Embedded $() are expanded once at definition time (like Make's 'simply expanded' flavor of variable)
$(<name>+=<text>)						Append
$(<name>:+=<text>)						Append, 'simply expanded'
$(if <expr_text>, <true_text>[, <false_text>])
$(if <text>)						"", "0", or "false" (case insensitive) are false - everything else is true
$(elseif <text>)
$(else)
$(endif)
Define (customizable) distinct escape character, so allow:
	\$() [escaped $]
	$(...)\<newline> [non-skipped blank line]
	$(xxx a\,b) [single arg contains embedded comma]
	$(yyy a,\ b ) [non-trimmed leading & trailing space in arg]
	$(zzz abc\), def) [first arg contains embedded closing paren]
Trim arguments by default - use ,$<whitespace><text> escape after argsep (need modifier to preserve whitespace for all args. Eg, :n)
$(env <var>)
$(include <pathname>[, <text>]*)
$(equal <text>, <pattern>)				"true" else "false"
$(notequal <text>, <pattern>)
$(match <text>, <regex>)
$(and <text>, <text>)
$(or <text>, <text>)
$(not <text>, <text>)
$(defined <name>)						"true" else "false"
Implement stemple command:
	-D|-dname[=text]
	-D|-d|--define name[=text]		Define macro
	-h|--help				
	-v|--verbose			
	-V|--version			
	-c|--chars <specials>
	input output					Files or stdin/stdout (name can be -)
Cull eof streams just before read - so top stream (and position) stays active all the time c is in play
Get rid of std::shared_ptr for input and output streams
Putback has position from original stream for each character
Get rid of shared_ptr in InStream - InStream => BaseStream, + derived classes to hold ifstream, istringstream (including single-char putback)
A lighter-weight putback solution for single characters
$(include) path should be relative to current file path
$(<name>:<mods>) - modify expansion, like csh
	Input modifiers alter processing of arguments or change built-in behavior
		:n [input] do not trim whitespace from arguments before expansion
		:i [input] ignore case (for $(equals), etc.)
		:x [input] don't expand macros in arguments - macros in arguments will be collected literally and processed when macro is expanded
Allow mods to be chained, eg :h:h:e
C-only interface
Unit tests for C-only interface
Unit tests for file I/O
